<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Status Dashboard</title>
    <style>
        /* Base Styles */
        :root {
            --primary: #4CAF50;
            --error: #ff4d4d;
            --background: #0a0e17;
            --card-bg: #111827;
            --text: #e2e8f0;
            --secondary-text: #94a3b8;
            --card-border: rgba(49, 130, 206, 0.2);
            --card-highlight: rgba(49, 130, 206, 0.1);
            --gradient-start: #4338ca;
            --gradient-end: #3b82f6;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            transition: all 0.3s ease;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            background: var(--background);
            color: var(--text);
            display: flex;
            justify-content: center;
            align-items: center;
            overflow-x: hidden;
            overflow-y: auto;
            position: relative;
        }

        body::before {
            content: "";
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, var(--gradient-start) 0%, transparent 70%);
            opacity: 0.1;
            z-index: -1;
        }

        /* Card Container */
        .container {
            background: var(--card-bg);
            width: 90%;
            max-width: 500px;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);
            border: 1px solid var(--card-border);
            backdrop-filter: blur(10px);
            transform: translateY(20px);
            opacity: 0;
            animation: fadeUp 0.8s ease forwards;
            overflow: hidden;
            position: relative;
        }

        /* Particle Background */
        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: -1;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0.4;
        }

        /* Generate 30 particles with different sizes and positions */
        @keyframes float {

            0%,
            100% {
                transform: translateY(0) translateX(0);
            }

            25% {
                transform: translateY(-20px) translateX(10px);
            }

            50% {
                transform: translateY(-10px) translateX(-15px);
            }

            75% {
                transform: translateY(15px) translateX(5px);
            }
        }

        /* Create particles dynamically with CSS */
        .container::before,
        .container::after {
            content: '';
            position: absolute;
            width: 15rem;
            height: 15rem;
            border-radius: 50%;
            z-index: -1;
            filter: blur(60px);
        }

        .container::before {
            background: var(--primary);
            opacity: 0.1;
            top: -5rem;
            left: -5rem;
            animation: pulse 10s infinite alternate;
        }

        .container::after {
            background: var(--gradient-start);
            opacity: 0.1;
            bottom: -5rem;
            right: -5rem;
            animation: pulse 7s infinite alternate-reverse;
        }

        @keyframes pulse {

            0%,
            100% {
                transform: scale(1);
                opacity: 0.1;
            }

            50% {
                transform: scale(1.2);
                opacity: 0.2;
            }
        }

        /* Header Styles */
        .header {
            margin-bottom: 2.5rem;
            text-align: center;
            position: relative;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            display: inline-flex;
            align-items: center;
            background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            color: white;
            animation: gradientText 3s ease infinite;
        }

        @keyframes gradientText {

            0%,
            100% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }
        }



        .subtitle {
            color: var(--secondary-text);
            font-size: 1rem;
            margin-bottom: 1rem;
            opacity: 0;
            animation: fadeIn 0.5s ease 0.3s forwards;
        }

        /* Status Indicators */
        .status-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .status-card {
            background: rgba(17, 24, 39, 0.7);
            border-radius: 1rem;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            border: 1px solid var(--card-border);
            transition: all 0.3s;
            transform: translateX(-20px);
            opacity: 0;
            animation: slideIn 0.5s ease forwards;
            position: relative;
            overflow: hidden;
        }

        .status-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            border-color: rgba(49, 130, 206, 0.5);
            background: var(--card-highlight);
        }

        .status-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(to right, var(--gradient-start), var(--gradient-end));
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.3s ease;
        }

        .status-card:hover::before {
            transform: scaleX(1);
        }

        .status-icon {
            font-size: 2rem;
            margin-right: 1rem;
            position: relative;
        }

        .success .status-icon {
            color: var(--primary);
            animation: pulse-success 2s infinite;
        }

        .error .status-icon {
            color: var(--error);
            animation: pulse-error 2s infinite;
        }

        @keyframes pulse-success {
            0% {
                text-shadow: 0 0 5px rgba(76, 175, 80, 0.1);
            }

            50% {
                text-shadow: 0 0 20px rgba(76, 175, 80, 0.4);
            }

            100% {
                text-shadow: 0 0 5px rgba(76, 175, 80, 0.1);
            }
        }

        @keyframes pulse-error {
            0% {
                text-shadow: 0 0 5px rgba(255, 77, 77, 0.1);
            }

            50% {
                text-shadow: 0 0 20px rgba(255, 77, 77, 0.4);
            }

            100% {
                text-shadow: 0 0 5px rgba(255, 77, 77, 0.1);
            }
        }

        .status-details {
            flex: 1;
        }

        .status-label {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.25rem;
        }

        .status-message {
            color: var(--secondary-text);
            font-size: 0.9rem;
        }

        .status-indicator {
            height: 40px;
            width: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .success .status-indicator {
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .error .status-indicator {
            background: rgba(255, 77, 77, 0.1);
            border: 1px solid rgba(255, 77, 77, 0.3);
        }

        .success .status-indicator::before {
            content: "";
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 2px solid transparent;
            border-top-color: var(--primary);
            animation: spin 2s linear infinite;
        }

        .error .status-indicator::before {
            content: "";
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 2px solid transparent;
            border-top-color: var(--error);
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .status-checkmark {
            height: 20px;
            width: 20px;
            position: relative;
        }

        .success .status-checkmark::before {
            content: "✓";
            color: var(--primary);
            font-size: 1.2rem;
            font-weight: bold;
        }

        .error .status-checkmark::before {
            content: "✗";
            color: var(--error);
            font-size: 1.2rem;
            font-weight: bold;
        }

        /* Footer */
        .footer {
            text-align: center;
            margin-top: 2rem;
            color: var(--secondary-text);
            font-size: 0.85rem;
            opacity: 0;
            animation: fadeIn 0.5s ease 0.9s forwards;
        }

        .footer .ping {
            display: inline-block;
            height: 8px;
            width: 8px;
            border-radius: 50%;
            background-color: var(--primary);
            margin-right: 5px;
            animation: ping 1.5s ease-in-out infinite;
        }

        .error .ping {
            background-color: var(--error);
        }

        @keyframes ping {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1);
                opacity: 0.5;
            }

            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Animation Keyframes */
        @keyframes fadeUp {
            from {
                transform: translateY(20px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes slideIn {
            from {
                transform: translateX(-20px);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            .container {
                padding: 1.5rem;
                width: 95%;
            }

            h1 {
                font-size: 2rem;
            }

            .status-card {
                padding: 1rem;
            }

            .status-icon {
                font-size: 1.5rem;
            }
        }

        /* Add a loading animation when the page loads */
        @keyframes loadingPulse {
            0% {
                opacity: 0.5;
            }

            50% {
                opacity: 1;
            }

            100% {
                opacity: 0.5;
            }
        }

        .last-updated {
            margin-top: 1rem;
            font-size: 0.8rem;
            color: var(--secondary-text);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .time {
            margin-left: 5px;
            opacity: 0;
            animation: fadeInTime 0.5s ease 1s forwards;
        }

        @keyframes fadeInTime {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="particles" id="particles"></div>

        <div class="header">
            <h1> Server Status</h1>
            <p class="subtitle">Real-time monitoring dashboard</p>
        </div>

        <div class="status-container">
            <div class="status-card success" id="serverCard">
                <div class="status-icon">🖥️</div>
                <div class="status-details">
                    <div class="status-label">Backend Server</div>
                    <div class="status-message">Running smoothly</div>
                </div>
                <div class="status-indicator">
                    <div class="status-checkmark"></div>
                </div>
            </div>

            <div class="status-card success" id="mongoCard">
                <div class="status-icon">🗄️</div>
                <div class="status-details">
                    <div class="status-label">MongoDB</div>
                    <div class="status-message">Connected successfully</div>
                </div>
                <div class="status-indicator">
                    <div class="status-checkmark"></div>
                </div>
            </div>
        </div>

        <div class="footer">
            <div class="last-updated">
                Last updated: <span class="time" id="lastUpdated"></span>
            </div>
            <p><span class="ping"></span> Monitoring system online</p>
        </div>
    </div>

    <script>
        // Set server status dynamically (this would normally come from your server template)
        const serverStatus = "<%= serverStatus %>";
        const mongoStatus = "<%= mongoStatus %>";

        const serverCard = document.getElementById('serverCard');
        const mongoCard = document.getElementById('mongoCard');
        const lastUpdated = document.getElementById('lastUpdated');

        // Update the last updated time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            lastUpdated.textContent = timeString;
        }

        // Check if MongoDB has an error
        if (!mongoStatus.includes('✅')) {
            mongoCard.classList.remove('success');
            mongoCard.classList.add('error');
            mongoCard.querySelector('.status-message').textContent = 'Connection failed';
        }

        // Animation delay for cards
        setTimeout(() => {
            serverCard.style.animation = 'slideIn 0.5s ease forwards';
        }, 300);

        setTimeout(() => {
            mongoCard.style.animation = 'slideIn 0.5s ease forwards';
        }, 500);

        // Update time when page loads
        updateTime();
        // Update time every minute
        setInterval(updateTime, 60000);

        // Create animated background particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const colors = ['#4338ca', '#3b82f6', '#4CAF50'];

            for (let i = 0; i < 20; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');

                // Random properties
                const size = Math.random() * 8 + 2;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const color = colors[Math.floor(Math.random() * colors.length)];
                const animationDuration = Math.random() * 20 + 10;
                const animationDelay = Math.random() * 5;

                // Apply styles
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                particle.style.backgroundColor = color;
                particle.style.animation = `float ${animationDuration}s ease-in-out ${animationDelay}s infinite`;

                particlesContainer.appendChild(particle);
            }
        }

        // Create particles when page loads
        createParticles();
    </script>
</body>

</html>